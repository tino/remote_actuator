// Generated by CoffeeScript 1.4.0
(function() {

  $(document).ready(function() {
    var lastSeen, socket, updateConnection;
    socket = io.connect(window.location);
    lastSeen = 0;
    $('.toprow .state').hide();
    $('#stop').on('click', function() {
      console.log("stop");
      return socket.emit("stop", 1);
    });
    updateConnection = function() {
      if (new Date().getTime() - lastSeen > 3000) {
        console.log("last seen: " + (new Date().getTime() - lastSeen) + " ago");
        $('#connection').removeClass('connected');
      } else {
        $('#connection').addClass('connected');
      }
      return window.setTimeout(updateConnection, 1000);
    };
    updateConnection();
    socket.on('live', function() {
      return console.log('live');
    });
    $('#mover').on('mouseup', function(evt) {
      console.log("mover at: " + evt.target.value);
      return socket.emit("move to", evt.target.value);
    });
    socket.on('position', function(data) {
      console.log("position: " + data[0]);
      return $('#position')[0].value = data[0];
    });
    socket.on('state', function(data) {
      var state;
      console.log("state: " + data);
      $('.toprow .state').hide();
      state = {
        '-1': 'stopping',
        '0': 'rest',
        '1': 'moving'
      }[data[0]];
      console.log("state: " + state);
      return $("#" + state).show();
    });
    socket.on('alive', function(data) {
      console.log('hearbeat');
      lastSeen = new Date().getTime();
      return $('#position')[0].value = data[0];
    });
    return socket.on('direction', function(data) {
      console.log("direction: " + data[0]);
      return $('#direction').text(data[0]);
    });
  });

}).call(this);
